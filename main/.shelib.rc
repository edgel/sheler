###############################################################################
#!/bin/bash
# 
# Shell Library ($sh), a new simple shell api for bash.
# 
# Version: 1.0
# 
# Methods:
#   trace;
#   debug;
#   info;
#   warn;
#   error;
#   enable;
#   disable;
# 
#   fref -d <ref-path> | -f <ref-path> | -n <ref-path>;
#   fman -rm|-ls|-cp|-mv|-ln <folder> <filename-pattern>;
#   copy -|<owner> <''|.tar|.tgz|.tar.gz|.zip> <name> <from> <to>;
# 
#   sdf -p [shell-path] | -c [shell-path] | -r [shell-path] <step-id>;
#   step -s | -d | <step-name> [step id];
#   steps <step-name:id> * ;
# 
#   exec -l <shell-path> <arguments> | -x <shell-path> <arguments>;
# 
# Global varibles:
#   shelib_enable_debug, 
#   shelib_curr_step_id, 
#   shelib_step_done_file
# 
# Dependencies: 
#   echo, pwd, ls, cat, grep, cut, sed, date, rm, mkdir, chown, diranme, 
#   filename, tar, zip, unzip, eval, xargs, ssh, scp
# 

###############################################################################

_shelib_trace(){
  if [ "$shelib_enable_trace" != "false" ] ; then
    echo ">> $@"
  fi
}

_shelib_debug(){
  if [ "$shelib_enable_debug" == "true" ] ; then
    _shelib__log [DEBUG] $@;
  fi
}

_shelib_info(){
  _shelib__log [INFO] $@;
}

_shelib_warn(){
  _shelib__log [WARN] $@;
}

_shelib_error(){
  _shelib__log [ERROR] $@;
}

_shelib_enable(){
  if [ "$1" == "debug" ] ; then
    shelib_enable_debug="true";
  fi
}

_shelib_disable(){
  if [ "$1" == "debug" ] ; then
    shelib_enable_debug="false";
  fi
}

_shelib__log(){
  echo "$(date +%Y-%m-%d' '%H:%M:%S.%N) [$0] $@"
}

###############################################################################

_shelib_fref(){
  _filepath=$2; # def file path
  if [ -z "$_filepath" ] ; then
    _filepath=$0;
  fi
  if [ "$1" == "-d" ] ; then
    dirname `pwd`/$_filepath;
  elif [ "$1" == "-f" ] ; then
    basename $_filepath;
  elif [ "$1" == "-n" ] ; then
    _file=$(_shelib_fref -f $2); echo ${_file%.*};
  fi
}

_shelib_fman(){
  if [ "$1" == "-rm" ] ; then
    find $2 -name "$3" | xargs rm -f;
  elif [ "$1" == "-ls" ] ; then
    find $2 -name "$3" | xargs ls -l;
  elif [ "$1" == "-cp" ] ; then
    find $2 -name "$3" | cp -t $4;
  elif [ "$1" == "-mv" ] ; then
    find $2 -name "$3" | mv -t $4;
  elif [ "$1" == "-ln" ] ; then
    find $2 -name "$3" | ln -s -t $4;
  fi
}

_shelib_copy(){
  if [ $# -ne 5 ] ; then
    _shelib_trace "Usage: copy -|<owner> <''|.tar|.tgz|...> <name> <from> <to>"; 
    return 1;
  fi

  _shelib_trace "Add owner:$1,type=$2,name=$3,file=$3$2,from=$4/,to=$5/";
  _owner=$1; _type=$2; _name=$3; _file=$3$2; _from=$4/; _to=$5/;

  mkdir -p $_to; scp -i ~/.ssh/id_rsa $_from$_file $_to;
  if [ $? -ne 0 ] ; then
    return 2;
  fi

  if [ "$_type" == ".zip" ] ; then
    _shelib_trace "Unzip file $_file"; cd $_to && unzip $_file && rm -f $_file; cd -;
  elif [ "$_type" == ".tar" ] ; then
    _shelib_trace "Untar file $_file"; cd $_to && tar xvf $_file && rm -f $_file; cd -;
  elif [ "$_type" == ".tgz" ] || [ "$_type" == ".tar.gz" ] ; then
    _shelib_trace "Untar file $_file"; cd $_to && tar xzvf $_file && rm -f $_file; cd -;
  fi

  if [ "$_owner" != "-" ] ; then
    _shelib_trace "Chang owner to $_owner for $_to$_name";
    chown -R $_owner $_to$_name;
  fi
  ls -l $_to; _shelib_trace "Add done for file $_file";
}

###############################################################################

_shelib_sdf(){
  if [ "$1" == "-p" ] ; then # clean
    echo ~/.step$(_shelib_fref -d $2)/$(_shelib_fref -n $2).done;
  elif [ "$1" == "-c" ] ; then # clean
    _shelib_trace "Clean done files for $2";
    _shelib_fman -rm "$(dirname `_shelib_sdf -p $2`)" "*.done";
  elif [ "$1" == "-r" ] ; then # reset
    for _step_id in ${@:3} ; do
      _step_done_file=~/.step$(_shelib_fref -d $2)/$(_shelib_fref -n $2).done;
      _shelib_trace "Reset step id: $_step_id, script: $2, file: $_step_done_file"; 
      sed "s/^$_step_id done at /$_step_id ---- at /g" $_step_done_file > $_step_done_file.tmp \
      && echo "----" >>  $_step_done_file.old && cat $_step_done_file >> $_step_done_file.old \
      && mv $_step_done_file.tmp $_step_done_file && rm $_step_done_file.old;
      _shelib_trace "Clean done with $?"; 
    done
  fi
}

_shelib_step(){
  if [ $1 == '-s' ] ; then
    _history=$(cat $(echo $shelib_step_done_file) | grep "^$(echo $shelib_curr_step_id) done at ");
    if [ ! -z "$_history" ] ; then
      _shelib_info skip $shelib_curr_step_id;
      echo $shelib_curr_step_id skip at $(date +%Y-%m-%d' '%H:%M:%S.%N) >> $shelib_step_done_file
      return 1;
    fi
    _history=$(cat $(echo $shelib_step_done_file) | grep "^$(echo $shelib_curr_step_id) start at ");
    if [ ! -z "$_history" ] ; then
      _shelib_info resume $shelib_curr_step_id ...;
      echo $shelib_curr_step_id resume at $(date +%Y-%m-%d' '%H:%M:%S.%N) >> $shelib_step_done_file
      return 0;
    fi
    _shelib_info start $shelib_curr_step_id ...;
    echo $shelib_curr_step_id start at $(date +%Y-%m-%d' '%H:%M:%S.%N) >> $shelib_step_done_file

  elif [ $1 == '-d' ] ; then
    _history=$(cat $(echo $shelib_step_done_file) | grep "^$(echo $shelib_curr_step_id) quit at ");
    if [ ! -z "$_history" ] ; then
      return 0;
    fi
    _result_curr_step=$2;
    if [ $_result_curr_step -ne 0 ] ; then
      exit $_result_curr_step;
    fi
    _shelib_info done $shelib_curr_step_id;
    echo $shelib_curr_step_id done at $(date +%Y-%m-%d' '%H:%M:%S.%N) >> $shelib_step_done_file

  elif [ $1 == '-q' ] ; then
    _result_curr_step=$2;
    if [ $_result_curr_step -ne 0 ] ; then
      exit $_result_curr_step;
    fi
    _shelib_info quit $shelib_curr_step_id;
    echo $shelib_curr_step_id quit at $(date +%Y-%m-%d' '%H:%M:%S.%N) >> $shelib_step_done_file

  else  
    _name_curr_step=$1; shelib_curr_step_id=$2; 
    if [ -z "$shelib_curr_step_id" ] ; then
      shelib_curr_step_id=$_name_curr_step;
    fi
    _shelib_trace "-----------------------------------------------------------------------------";
    _shelib_trace "-- Exec step { name: $_name_curr_step, id: $shelib_curr_step_id }";
    _shelib_trace "-- ";
    _shelib_step -s;
    if [ $? -eq 0 ] ; then
      $_name_curr_step; _shelib_step -d $?;
    fi
  fi
}

_shelib_steps(){
  _user_steps=$@; # def the user steps to exec
  if [ $# -eq 1 ] ; then
    _user_steps=`eval echo $1`;
  elif [ $# -gt 1 ] ; then
    if [ "`eval echo $1`" != "$1" ] ; then
      _user_steps=`eval echo ${@:2}`;
    fi
  fi
  for _step_id in $_user_steps ; do
    _step_name=$(echo $_step_id|cut -d : -f 1);
    _shelib_step $_step_name $_step_id; 
  done
}

###############################################################################

_shelib_exec(){
  if [ "-l" == "$1" ] ; then
    sh ${@:2} 2>&1 | tee $(_shelib_fref -d $2)/$(_shelib_fref -n $2).log;
  fi
  if [ "-x" == "$1" ] ; then
    # PS4 Other Options: ${SHLVL},${BASH_SUBSHELL} $@ $? $1 \t
    PS4='	| ${BASH_SOURCE} ${LINENO} ${FUNCNAME}() ' sh -x ${@:2} 2>&1 \
    | tee $(_shelib_fref -d $2)/$(_shelib_fref -n $2).lxg;
  fi
}

###############################################################################

_shelib__init(){
  _shelib_trace "Current script folder: $(_shelib_fref -d), filename: $(_shelib_fref -n), args: [$@]"
  if [ -z "$shelib_step_done_file" ] ; then
    shelib_step_done_file=$(_shelib_sdf -p); _shelib_trace "Init the done file: $shelib_step_done_file";
    if [ ! -f "$shelib_step_done_file" ] ; then
      _shelib_trace "Create file $(basename $shelib_step_done_file) in dir $(dirname $shelib_step_done_file)";
      mkdir -p $(dirname $shelib_step_done_file) && > $shelib_step_done_file;
    fi
  fi
}

_shelib__init $@;

###############################################################################

_shelib(){
  if [ ! -z "$2" ] ; then
    _shelib_$1 ${@:2}; # exec the shelib methods
  fi
}

if [ ! -z "$sh" ] ; then
  _sh=$sh; _shelib_trace "Var _sh vs sh: [$_sh, $sh]";
fi

shelib=_shelib; sh=$shelib; # define $shelib and $sh as the short func name

###############################################################################

# SHELIB="./main/shelib.so" && . $(dirname `pwd`/$0)/$SHELIB;

###############################################################################

